ShapeParser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = [],
        peg$c2 = function(items) {return items;},
        peg$c3 = function(left, right) { return SG.multiple(left,right); },
        peg$c4 = "rect[",
        peg$c5 = { type: "literal", value: "rect[", description: "\"rect[\"" },
        peg$c6 = ",",
        peg$c7 = { type: "literal", value: ",", description: "\",\"" },
        peg$c8 = "]",
        peg$c9 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c10 = function(x, y, w, h) { return SG.rect(x,y,w,h); },
        peg$c11 = "circle[",
        peg$c12 = { type: "literal", value: "circle[", description: "\"circle[\"" },
        peg$c13 = function(x, y, r) { return SG.circle({x:x,y:y},r); },
        peg$c14 = "line[",
        peg$c15 = { type: "literal", value: "line[", description: "\"line[\"" },
        peg$c16 = function(x1, y1, x2, y2) { return SG.line({x:x1,y:y1},{x:x2,y:y2}); },
        peg$c17 = "curve[",
        peg$c18 = { type: "literal", value: "curve[", description: "\"curve[\"" },
        peg$c19 = function(x1, y1, x2, y2, x3, y3) { return SG.bezier([{x:x1,y:y1},{x:x2,y:y2},{x:x3,y:y3}]); },
        peg$c20 = function(x1, y1, x2, y2, x3, y3, x4, y4) { return SG.bezier([{x:x1,y:y1},{x:x2,y:y2},{x:x3,y:y3},{x:x4,y:y4}]); },
        peg$c21 = "path[",
        peg$c22 = { type: "literal", value: "path[", description: "\"path[\"" },
        peg$c23 = function(path) { return SG.polyshape(path); },
        peg$c24 = "text[",
        peg$c25 = { type: "literal", value: "text[", description: "\"text[\"" },
        peg$c26 = function(str, x, y, fs, font) { return SG.textGlyphObjects(str,FONTS[font],{x:x,y:y},fs); },
        peg$c27 = "translate[",
        peg$c28 = { type: "literal", value: "translate[", description: "\"translate[\"" },
        peg$c29 = "]{",
        peg$c30 = { type: "literal", value: "]{", description: "\"]{\"" },
        peg$c31 = "}",
        peg$c32 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c33 = function(dx, dy, contents) { return SG.translate(contents,dx,dy); },
        peg$c34 = "rotate[",
        peg$c35 = { type: "literal", value: "rotate[", description: "\"rotate[\"" },
        peg$c36 = function(angle, contents) { return SG.rotate(contents,angle); },
        peg$c37 = function(angle, x, y, contents) { return SG.rotate(contents,angle,{x:x,y:y}); },
        peg$c38 = "scale[",
        peg$c39 = { type: "literal", value: "scale[", description: "\"scale[\"" },
        peg$c40 = function(factor, contents) { return SG.scale(contents,factor); },
        peg$c41 = "complex{",
        peg$c42 = { type: "literal", value: "complex{", description: "\"complex{\"" },
        peg$c43 = function(contents) { return SG.combineComplex(contents); },
        peg$c44 = "reverse{",
        peg$c45 = { type: "literal", value: "reverse{", description: "\"reverse{\"" },
        peg$c46 = function(contents) { return SG.reverse(contents); },
        peg$c47 = "~",
        peg$c48 = { type: "literal", value: "~", description: "\"~\"" },
        peg$c49 = function(obj) { return SG.reverse(obj); },
        peg$c50 = function(pt) {return [pt.first].concat(pt.rest)},
        peg$c51 = function(l, next) { return {first:l, rest:[next.first].concat(next.rest)}; },
        peg$c52 = function(l, c, next) { return {first:l, rest:[GEO.quadraticToCubic([l,c,next.first]).slice(1,4)].concat(next.rest)}; },
        peg$c53 = function(l, c1, c2, next) { return {first:l, rest:[[c1,c2,next.first]].concat(next.rest)}; },
        peg$c54 = function(l) { return {first:l, rest:[]}; },
        peg$c55 = "(",
        peg$c56 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c57 = ")",
        peg$c58 = { type: "literal", value: ")", description: "\")\"" },
        peg$c59 = function(x, y) { return {x:x,y:y}; },
        peg$c60 = "<",
        peg$c61 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c62 = ">",
        peg$c63 = { type: "literal", value: ">", description: "\">\"" },
        peg$c64 = { type: "other", description: "a string" },
        peg$c65 = "\"",
        peg$c66 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c67 = "\\",
        peg$c68 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c69 = function() {return '\\';},
        peg$c70 = function() {return '"';},
        peg$c71 = void 0,
        peg$c72 = { type: "any", description: "any character" },
        peg$c73 = function(c) {return c;},
        peg$c74 = function(strchars) { return strchars.join(''); },
        peg$c75 = { type: "other", description: "a number" },
        peg$c76 = /^[0-9.]/,
        peg$c77 = { type: "class", value: "[0-9.]", description: "[0-9.]" },
        peg$c78 = function(digits) {return parseFloat(digits.join(''));},
        peg$c79 = "-",
        peg$c80 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c81 = function(digits) {return -parseFloat(digits.join(''));},
        peg$c82 = { type: "other", description: "a whitespace character" },
        peg$c83 = /^[ \f\n\r\t\x0B\u200B\xA0\u1680\u200B\u180E\u2000\u200B\u2001\u2002\u200B\u2003\u2004\u200B \u2005\u2006\u200B\u2007\u2008\u200B\u2009\u200A\u200B\u2028\u2029\u200B\u200B\u202F\u205F\u200B\u3000]/,
        peg$c84 = { type: "class", value: "[ \\f\\n\\r\\t\\x0B\\u200B\\xA0\\u1680\\u200B\\u180E\\u2000\\u200B\\u2001\\u2002\\u200B\\u2003\\u2004\\u200B \\u2005\\u2006\\u200B\\u2007\\u2008\\u200B\\u2009\\u200A\\u200B\\u2028\\u2029\\u200B\\u200B\\u202F\\u205F\\u200B\\u3000]", description: "[ \\f\\n\\r\\t\\x0B\\u200B\\xA0\\u1680\\u200B\\u180E\\u2000\\u200B\\u2001\\u2002\\u200B\\u2003\\u2004\\u200B \\u2005\\u2006\\u200B\\u2007\\u2008\\u200B\\u2009\\u200A\\u200B\\u2028\\u2029\\u200B\\u200B\\u202F\\u205F\\u200B\\u3000]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parses();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parses();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseitems();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parses();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parses();
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c2(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseitems() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseitem();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parses();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parses();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseitems();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c3(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseitem();
      }

      return s0;
    }

    function peg$parseitem() {
      var s0;

      s0 = peg$parseunit();
      if (s0 === peg$FAILED) {
        s0 = peg$parsegrouping();
      }

      return s0;
    }

    function peg$parseunit() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c4) {
        s1 = peg$c4;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parses();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parses();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parses();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parses();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c6;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parses();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parses();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsenumber();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parses();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parses();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c6;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c7); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parses();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parses();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsenumber();
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parses();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parses();
                            }
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 44) {
                                s13 = peg$c6;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c7); }
                              }
                              if (s13 !== peg$FAILED) {
                                s14 = [];
                                s15 = peg$parses();
                                while (s15 !== peg$FAILED) {
                                  s14.push(s15);
                                  s15 = peg$parses();
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsenumber();
                                  if (s15 !== peg$FAILED) {
                                    s16 = [];
                                    s17 = peg$parses();
                                    while (s17 !== peg$FAILED) {
                                      s16.push(s17);
                                      s17 = peg$parses();
                                    }
                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 93) {
                                        s17 = peg$c8;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        peg$reportedPos = s0;
                                        s1 = peg$c10(s3, s7, s11, s15);
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c11) {
          s1 = peg$c11;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c12); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parses();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parses();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenumber();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parses();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parses();
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s5 = peg$c6;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c7); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parses();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parses();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsenumber();
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$parses();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parses();
                      }
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s9 = peg$c6;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c7); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = [];
                          s11 = peg$parses();
                          while (s11 !== peg$FAILED) {
                            s10.push(s11);
                            s11 = peg$parses();
                          }
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parsenumber();
                            if (s11 !== peg$FAILED) {
                              s12 = [];
                              s13 = peg$parses();
                              while (s13 !== peg$FAILED) {
                                s12.push(s13);
                                s13 = peg$parses();
                              }
                              if (s12 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 93) {
                                  s13 = peg$c8;
                                  peg$currPos++;
                                } else {
                                  s13 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                }
                                if (s13 !== peg$FAILED) {
                                  peg$reportedPos = s0;
                                  s1 = peg$c13(s3, s7, s11);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c14) {
            s1 = peg$c14;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parses();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parses();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenumber();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parses();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parses();
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c6;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parses();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parses();
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsenumber();
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parses();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parses();
                        }
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s9 = peg$c6;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c7); }
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = [];
                            s11 = peg$parses();
                            while (s11 !== peg$FAILED) {
                              s10.push(s11);
                              s11 = peg$parses();
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parsenumber();
                              if (s11 !== peg$FAILED) {
                                s12 = [];
                                s13 = peg$parses();
                                while (s13 !== peg$FAILED) {
                                  s12.push(s13);
                                  s13 = peg$parses();
                                }
                                if (s12 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 44) {
                                    s13 = peg$c6;
                                    peg$currPos++;
                                  } else {
                                    s13 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s14 = [];
                                    s15 = peg$parses();
                                    while (s15 !== peg$FAILED) {
                                      s14.push(s15);
                                      s15 = peg$parses();
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s15 = peg$parsenumber();
                                      if (s15 !== peg$FAILED) {
                                        s16 = [];
                                        s17 = peg$parses();
                                        while (s17 !== peg$FAILED) {
                                          s16.push(s17);
                                          s17 = peg$parses();
                                        }
                                        if (s16 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 93) {
                                            s17 = peg$c8;
                                            peg$currPos++;
                                          } else {
                                            s17 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                          }
                                          if (s17 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c16(s3, s7, s11, s15);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c17) {
              s1 = peg$c17;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parses();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parses();
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenumber();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parses();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parses();
                  }
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s5 = peg$c6;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c7); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parses();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parses();
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parsenumber();
                        if (s7 !== peg$FAILED) {
                          s8 = [];
                          s9 = peg$parses();
                          while (s9 !== peg$FAILED) {
                            s8.push(s9);
                            s9 = peg$parses();
                          }
                          if (s8 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 44) {
                              s9 = peg$c6;
                              peg$currPos++;
                            } else {
                              s9 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c7); }
                            }
                            if (s9 !== peg$FAILED) {
                              s10 = [];
                              s11 = peg$parses();
                              while (s11 !== peg$FAILED) {
                                s10.push(s11);
                                s11 = peg$parses();
                              }
                              if (s10 !== peg$FAILED) {
                                s11 = peg$parsenumber();
                                if (s11 !== peg$FAILED) {
                                  s12 = [];
                                  s13 = peg$parses();
                                  while (s13 !== peg$FAILED) {
                                    s12.push(s13);
                                    s13 = peg$parses();
                                  }
                                  if (s12 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 44) {
                                      s13 = peg$c6;
                                      peg$currPos++;
                                    } else {
                                      s13 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                    }
                                    if (s13 !== peg$FAILED) {
                                      s14 = [];
                                      s15 = peg$parses();
                                      while (s15 !== peg$FAILED) {
                                        s14.push(s15);
                                        s15 = peg$parses();
                                      }
                                      if (s14 !== peg$FAILED) {
                                        s15 = peg$parsenumber();
                                        if (s15 !== peg$FAILED) {
                                          s16 = [];
                                          s17 = peg$parses();
                                          while (s17 !== peg$FAILED) {
                                            s16.push(s17);
                                            s17 = peg$parses();
                                          }
                                          if (s16 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 44) {
                                              s17 = peg$c6;
                                              peg$currPos++;
                                            } else {
                                              s17 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                            }
                                            if (s17 !== peg$FAILED) {
                                              s18 = [];
                                              s19 = peg$parses();
                                              while (s19 !== peg$FAILED) {
                                                s18.push(s19);
                                                s19 = peg$parses();
                                              }
                                              if (s18 !== peg$FAILED) {
                                                s19 = peg$parsenumber();
                                                if (s19 !== peg$FAILED) {
                                                  s20 = [];
                                                  s21 = peg$parses();
                                                  while (s21 !== peg$FAILED) {
                                                    s20.push(s21);
                                                    s21 = peg$parses();
                                                  }
                                                  if (s20 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 44) {
                                                      s21 = peg$c6;
                                                      peg$currPos++;
                                                    } else {
                                                      s21 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                                    }
                                                    if (s21 !== peg$FAILED) {
                                                      s22 = [];
                                                      s23 = peg$parses();
                                                      while (s23 !== peg$FAILED) {
                                                        s22.push(s23);
                                                        s23 = peg$parses();
                                                      }
                                                      if (s22 !== peg$FAILED) {
                                                        s23 = peg$parsenumber();
                                                        if (s23 !== peg$FAILED) {
                                                          s24 = [];
                                                          s25 = peg$parses();
                                                          while (s25 !== peg$FAILED) {
                                                            s24.push(s25);
                                                            s25 = peg$parses();
                                                          }
                                                          if (s24 !== peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 93) {
                                                              s25 = peg$c8;
                                                              peg$currPos++;
                                                            } else {
                                                              s25 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                                            }
                                                            if (s25 !== peg$FAILED) {
                                                              peg$reportedPos = s0;
                                                              s1 = peg$c19(s3, s7, s11, s15, s19, s23);
                                                              s0 = s1;
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c17) {
                s1 = peg$c17;
                peg$currPos += 6;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c18); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parses();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parses();
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsenumber();
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parses();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parses();
                    }
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s5 = peg$c6;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c7); }
                      }
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        s7 = peg$parses();
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          s7 = peg$parses();
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parsenumber();
                          if (s7 !== peg$FAILED) {
                            s8 = [];
                            s9 = peg$parses();
                            while (s9 !== peg$FAILED) {
                              s8.push(s9);
                              s9 = peg$parses();
                            }
                            if (s8 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 44) {
                                s9 = peg$c6;
                                peg$currPos++;
                              } else {
                                s9 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c7); }
                              }
                              if (s9 !== peg$FAILED) {
                                s10 = [];
                                s11 = peg$parses();
                                while (s11 !== peg$FAILED) {
                                  s10.push(s11);
                                  s11 = peg$parses();
                                }
                                if (s10 !== peg$FAILED) {
                                  s11 = peg$parsenumber();
                                  if (s11 !== peg$FAILED) {
                                    s12 = [];
                                    s13 = peg$parses();
                                    while (s13 !== peg$FAILED) {
                                      s12.push(s13);
                                      s13 = peg$parses();
                                    }
                                    if (s12 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 44) {
                                        s13 = peg$c6;
                                        peg$currPos++;
                                      } else {
                                        s13 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                      }
                                      if (s13 !== peg$FAILED) {
                                        s14 = [];
                                        s15 = peg$parses();
                                        while (s15 !== peg$FAILED) {
                                          s14.push(s15);
                                          s15 = peg$parses();
                                        }
                                        if (s14 !== peg$FAILED) {
                                          s15 = peg$parsenumber();
                                          if (s15 !== peg$FAILED) {
                                            s16 = [];
                                            s17 = peg$parses();
                                            while (s17 !== peg$FAILED) {
                                              s16.push(s17);
                                              s17 = peg$parses();
                                            }
                                            if (s16 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 44) {
                                                s17 = peg$c6;
                                                peg$currPos++;
                                              } else {
                                                s17 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                              }
                                              if (s17 !== peg$FAILED) {
                                                s18 = [];
                                                s19 = peg$parses();
                                                while (s19 !== peg$FAILED) {
                                                  s18.push(s19);
                                                  s19 = peg$parses();
                                                }
                                                if (s18 !== peg$FAILED) {
                                                  s19 = peg$parsenumber();
                                                  if (s19 !== peg$FAILED) {
                                                    s20 = [];
                                                    s21 = peg$parses();
                                                    while (s21 !== peg$FAILED) {
                                                      s20.push(s21);
                                                      s21 = peg$parses();
                                                    }
                                                    if (s20 !== peg$FAILED) {
                                                      if (input.charCodeAt(peg$currPos) === 44) {
                                                        s21 = peg$c6;
                                                        peg$currPos++;
                                                      } else {
                                                        s21 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                                      }
                                                      if (s21 !== peg$FAILED) {
                                                        s22 = [];
                                                        s23 = peg$parses();
                                                        while (s23 !== peg$FAILED) {
                                                          s22.push(s23);
                                                          s23 = peg$parses();
                                                        }
                                                        if (s22 !== peg$FAILED) {
                                                          s23 = peg$parsenumber();
                                                          if (s23 !== peg$FAILED) {
                                                            s24 = [];
                                                            s25 = peg$parses();
                                                            while (s25 !== peg$FAILED) {
                                                              s24.push(s25);
                                                              s25 = peg$parses();
                                                            }
                                                            if (s24 !== peg$FAILED) {
                                                              if (input.charCodeAt(peg$currPos) === 44) {
                                                                s25 = peg$c6;
                                                                peg$currPos++;
                                                              } else {
                                                                s25 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                                              }
                                                              if (s25 !== peg$FAILED) {
                                                                s26 = [];
                                                                s27 = peg$parses();
                                                                while (s27 !== peg$FAILED) {
                                                                  s26.push(s27);
                                                                  s27 = peg$parses();
                                                                }
                                                                if (s26 !== peg$FAILED) {
                                                                  s27 = peg$parsenumber();
                                                                  if (s27 !== peg$FAILED) {
                                                                    s28 = [];
                                                                    s29 = peg$parses();
                                                                    while (s29 !== peg$FAILED) {
                                                                      s28.push(s29);
                                                                      s29 = peg$parses();
                                                                    }
                                                                    if (s28 !== peg$FAILED) {
                                                                      if (input.charCodeAt(peg$currPos) === 44) {
                                                                        s29 = peg$c6;
                                                                        peg$currPos++;
                                                                      } else {
                                                                        s29 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                                                      }
                                                                      if (s29 !== peg$FAILED) {
                                                                        s30 = [];
                                                                        s31 = peg$parses();
                                                                        while (s31 !== peg$FAILED) {
                                                                          s30.push(s31);
                                                                          s31 = peg$parses();
                                                                        }
                                                                        if (s30 !== peg$FAILED) {
                                                                          s31 = peg$parsenumber();
                                                                          if (s31 !== peg$FAILED) {
                                                                            s32 = [];
                                                                            s33 = peg$parses();
                                                                            while (s33 !== peg$FAILED) {
                                                                              s32.push(s33);
                                                                              s33 = peg$parses();
                                                                            }
                                                                            if (s32 !== peg$FAILED) {
                                                                              if (input.charCodeAt(peg$currPos) === 93) {
                                                                                s33 = peg$c8;
                                                                                peg$currPos++;
                                                                              } else {
                                                                                s33 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                                                              }
                                                                              if (s33 !== peg$FAILED) {
                                                                                peg$reportedPos = s0;
                                                                                s1 = peg$c20(s3, s7, s11, s15, s19, s23, s27, s31);
                                                                                s0 = s1;
                                                                              } else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$c0;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s0;
                                                                              s0 = peg$c0;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$c0;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s0;
                                                                          s0 = peg$c0;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$c0;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$c0;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$c0;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$c0;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$c0;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$c0;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 5) === peg$c21) {
                  s1 = peg$c21;
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parses();
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parses();
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsepath();
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$parses();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parses();
                      }
                      if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s5 = peg$c8;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c9); }
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = [];
                          s7 = peg$parses();
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            s7 = peg$parses();
                          }
                          if (s6 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c23(s3);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c24) {
                    s1 = peg$c24;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c25); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parses();
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parses();
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parsestring();
                      if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parses();
                        while (s5 !== peg$FAILED) {
                          s4.push(s5);
                          s5 = peg$parses();
                        }
                        if (s4 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s5 = peg$c6;
                            peg$currPos++;
                          } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c7); }
                          }
                          if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parses();
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              s7 = peg$parses();
                            }
                            if (s6 !== peg$FAILED) {
                              s7 = peg$parsenumber();
                              if (s7 !== peg$FAILED) {
                                s8 = [];
                                s9 = peg$parses();
                                while (s9 !== peg$FAILED) {
                                  s8.push(s9);
                                  s9 = peg$parses();
                                }
                                if (s8 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 44) {
                                    s9 = peg$c6;
                                    peg$currPos++;
                                  } else {
                                    s9 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                  }
                                  if (s9 !== peg$FAILED) {
                                    s10 = [];
                                    s11 = peg$parses();
                                    while (s11 !== peg$FAILED) {
                                      s10.push(s11);
                                      s11 = peg$parses();
                                    }
                                    if (s10 !== peg$FAILED) {
                                      s11 = peg$parsenumber();
                                      if (s11 !== peg$FAILED) {
                                        s12 = [];
                                        s13 = peg$parses();
                                        while (s13 !== peg$FAILED) {
                                          s12.push(s13);
                                          s13 = peg$parses();
                                        }
                                        if (s12 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 44) {
                                            s13 = peg$c6;
                                            peg$currPos++;
                                          } else {
                                            s13 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                          }
                                          if (s13 !== peg$FAILED) {
                                            s14 = [];
                                            s15 = peg$parses();
                                            while (s15 !== peg$FAILED) {
                                              s14.push(s15);
                                              s15 = peg$parses();
                                            }
                                            if (s14 !== peg$FAILED) {
                                              s15 = peg$parsenumber();
                                              if (s15 !== peg$FAILED) {
                                                s16 = [];
                                                s17 = peg$parses();
                                                while (s17 !== peg$FAILED) {
                                                  s16.push(s17);
                                                  s17 = peg$parses();
                                                }
                                                if (s16 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 44) {
                                                    s17 = peg$c6;
                                                    peg$currPos++;
                                                  } else {
                                                    s17 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                                                  }
                                                  if (s17 !== peg$FAILED) {
                                                    s18 = [];
                                                    s19 = peg$parses();
                                                    while (s19 !== peg$FAILED) {
                                                      s18.push(s19);
                                                      s19 = peg$parses();
                                                    }
                                                    if (s18 !== peg$FAILED) {
                                                      s19 = peg$parsestring();
                                                      if (s19 !== peg$FAILED) {
                                                        s20 = [];
                                                        s21 = peg$parses();
                                                        while (s21 !== peg$FAILED) {
                                                          s20.push(s21);
                                                          s21 = peg$parses();
                                                        }
                                                        if (s20 !== peg$FAILED) {
                                                          if (input.charCodeAt(peg$currPos) === 93) {
                                                            s21 = peg$c8;
                                                            peg$currPos++;
                                                          } else {
                                                            s21 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c9); }
                                                          }
                                                          if (s21 !== peg$FAILED) {
                                                            peg$reportedPos = s0;
                                                            s1 = peg$c26(s3, s7, s11, s15, s19);
                                                            s0 = s1;
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$c0;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$c0;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$c0;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$c0;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$c0;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$c0;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$c0;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$c0;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsegrouping() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c27) {
        s1 = peg$c27;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c28); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parses();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parses();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parses();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parses();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c6;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parses();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parses();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsenumber();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parses();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parses();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c29) {
                        s9 = peg$c29;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c30); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parses();
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parses();
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseitems();
                          if (s11 !== peg$FAILED) {
                            s12 = [];
                            s13 = peg$parses();
                            while (s13 !== peg$FAILED) {
                              s12.push(s13);
                              s13 = peg$parses();
                            }
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 125) {
                                s13 = peg$c31;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c32); }
                              }
                              if (s13 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c33(s3, s7, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 7) === peg$c34) {
          s1 = peg$c34;
          peg$currPos += 7;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c35); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parses();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parses();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsenumber();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parses();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parses();
              }
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c29) {
                  s5 = peg$c29;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c30); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parses();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parses();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseitems();
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$parses();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parses();
                      }
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s9 = peg$c31;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c32); }
                        }
                        if (s9 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c36(s3, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 7) === peg$c34) {
            s1 = peg$c34;
            peg$currPos += 7;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c35); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parses();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parses();
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenumber();
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parses();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parses();
                }
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c6;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c7); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parses();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parses();
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsenumber();
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parses();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parses();
                        }
                        if (s8 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 44) {
                            s9 = peg$c6;
                            peg$currPos++;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c7); }
                          }
                          if (s9 !== peg$FAILED) {
                            s10 = [];
                            s11 = peg$parses();
                            while (s11 !== peg$FAILED) {
                              s10.push(s11);
                              s11 = peg$parses();
                            }
                            if (s10 !== peg$FAILED) {
                              s11 = peg$parsenumber();
                              if (s11 !== peg$FAILED) {
                                s12 = [];
                                s13 = peg$parses();
                                while (s13 !== peg$FAILED) {
                                  s12.push(s13);
                                  s13 = peg$parses();
                                }
                                if (s12 !== peg$FAILED) {
                                  if (input.substr(peg$currPos, 2) === peg$c29) {
                                    s13 = peg$c29;
                                    peg$currPos += 2;
                                  } else {
                                    s13 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c30); }
                                  }
                                  if (s13 !== peg$FAILED) {
                                    s14 = [];
                                    s15 = peg$parses();
                                    while (s15 !== peg$FAILED) {
                                      s14.push(s15);
                                      s15 = peg$parses();
                                    }
                                    if (s14 !== peg$FAILED) {
                                      s15 = peg$parseitems();
                                      if (s15 !== peg$FAILED) {
                                        s16 = [];
                                        s17 = peg$parses();
                                        while (s17 !== peg$FAILED) {
                                          s16.push(s17);
                                          s17 = peg$parses();
                                        }
                                        if (s16 !== peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 125) {
                                            s17 = peg$c31;
                                            peg$currPos++;
                                          } else {
                                            s17 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c32); }
                                          }
                                          if (s17 !== peg$FAILED) {
                                            peg$reportedPos = s0;
                                            s1 = peg$c37(s3, s7, s11, s15);
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$c0;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$c0;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$c0;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$c0;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 6) === peg$c38) {
              s1 = peg$c38;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              s3 = peg$parses();
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parses();
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsenumber();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parses();
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    s5 = peg$parses();
                  }
                  if (s4 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c29) {
                      s5 = peg$c29;
                      peg$currPos += 2;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c30); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = [];
                      s7 = peg$parses();
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = peg$parses();
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseitems();
                        if (s7 !== peg$FAILED) {
                          s8 = [];
                          s9 = peg$parses();
                          while (s9 !== peg$FAILED) {
                            s8.push(s9);
                            s9 = peg$parses();
                          }
                          if (s8 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                              s9 = peg$c31;
                              peg$currPos++;
                            } else {
                              s9 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c32); }
                            }
                            if (s9 !== peg$FAILED) {
                              peg$reportedPos = s0;
                              s1 = peg$c40(s3, s7);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 8) === peg$c41) {
                s1 = peg$c41;
                peg$currPos += 8;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c42); }
              }
              if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parses();
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parses();
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseitems();
                  if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parses();
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parses();
                    }
                    if (s4 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s5 = peg$c31;
                        peg$currPos++;
                      } else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c32); }
                      }
                      if (s5 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c43(s3);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 8) === peg$c44) {
                  s1 = peg$c44;
                  peg$currPos += 8;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parses();
                  while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parses();
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseitems();
                    if (s3 !== peg$FAILED) {
                      s4 = [];
                      s5 = peg$parses();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parses();
                      }
                      if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s5 = peg$c31;
                          peg$currPos++;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c32); }
                        }
                        if (s5 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c46(s3);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 126) {
                    s1 = peg$c47;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c48); }
                  }
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseitem();
                    if (s2 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c49(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsepath() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsepathtail();
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c50(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsepathtail() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      s1 = peg$parsepoint();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parses();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parses();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c6;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parses();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parses();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsepathtail();
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c51(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsepoint();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parses();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parses();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s3 = peg$c6;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parses();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parses();
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseoffcurve();
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parses();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parses();
                  }
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                      s7 = peg$c6;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c7); }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$parses();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parses();
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsepathtail();
                        if (s9 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c52(s1, s5, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsepoint();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parses();
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parses();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s3 = peg$c6;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s3 !== peg$FAILED) {
                s4 = [];
                s5 = peg$parses();
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  s5 = peg$parses();
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseoffcurve();
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parses();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parses();
                    }
                    if (s6 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s7 = peg$c6;
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c7); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = [];
                        s9 = peg$parses();
                        while (s9 !== peg$FAILED) {
                          s8.push(s9);
                          s9 = peg$parses();
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parseoffcurve();
                          if (s9 !== peg$FAILED) {
                            s10 = [];
                            s11 = peg$parses();
                            while (s11 !== peg$FAILED) {
                              s10.push(s11);
                              s11 = peg$parses();
                            }
                            if (s10 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 44) {
                                s11 = peg$c6;
                                peg$currPos++;
                              } else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c7); }
                              }
                              if (s11 !== peg$FAILED) {
                                s12 = [];
                                s13 = peg$parses();
                                while (s13 !== peg$FAILED) {
                                  s12.push(s13);
                                  s13 = peg$parses();
                                }
                                if (s12 !== peg$FAILED) {
                                  s13 = peg$parsepathtail();
                                  if (s13 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c53(s1, s5, s9, s13);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$c0;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsepoint();
            if (s1 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c54(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsepoint() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c55;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parses();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parses();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parses();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parses();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c6;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parses();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parses();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsenumber();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parses();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parses();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c57;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c58); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c59(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseoffcurve() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c60;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parses();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parses();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenumber();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parses();
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parses();
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c6;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parses();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parses();
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsenumber();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parses();
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      s9 = peg$parses();
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 62) {
                        s9 = peg$c62;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c63); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c59(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parsestring() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c65;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s4 = peg$c67;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s5 = peg$c67;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s5 !== peg$FAILED) {
            peg$reportedPos = s3;
            s4 = peg$c69();
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c67;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 34) {
              s5 = peg$c65;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c66); }
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c70();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 34) {
              s5 = peg$c65;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c66); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c71;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c72); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c73(s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 92) {
            s4 = peg$c67;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s5 = peg$c67;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
            if (s5 !== peg$FAILED) {
              peg$reportedPos = s3;
              s4 = peg$c69();
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 92) {
              s4 = peg$c67;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c68); }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s5 = peg$c65;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s3;
                s4 = peg$c70();
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 34) {
                s5 = peg$c65;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c66); }
              }
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = peg$c71;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
              if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c72); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s3;
                  s4 = peg$c73(s5);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c65;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c74(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c76.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c76.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0;
        s1 = peg$c78(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c79;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c76.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c76.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c77); }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c81(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }

      return s0;
    }

    function peg$parses() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c83.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c82); }
      }

      return s0;
    }


    	var SG = options.ShapeGen;
    	var GEO = options.Geometry;
    	var FONTS = options.fonts;


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();
